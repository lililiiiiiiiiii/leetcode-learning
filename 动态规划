连续子数组最大和问题（面试题42）
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxnum = nums[0]
        for i in range(1,len(nums)):
            if nums[i - 1] > 0:
                nums[i] += nums[i - 1]
            maxnum = max(maxnum,nums[i])
        return maxnum
#状态方程是以nums[i]为结尾的最大数组和而不是以nums[i]开头，这个要注意！
#如果作为开头的话无法判断


零钱兑换（322）
自下而上动态规划：
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float('inf')] * (amount + 1)
        dp[0] = 0        
        for coin in coins:
            for x in range(coin, amount + 1):
                dp[x] = min(dp[x], dp[x - coin] + 1)
        return dp[amount] if dp[amount] != float('inf') else -1
        
  自上而下动态规划
    def coinChange(self, coins: List[int], amount: int) -> int:
        @functools.lru_cache(amount)
        def dp(rem):
            if rem < 0: return -1
            if rem == 0: return 0
            mini = int(1e9)
            for coin in self.coins:
                res = dp(rem - coin)
                if res >= 0 and res < mini:
                    mini = res + 1
            return mini if mini < int(1e9) else -1

        self.coins = coins
        if amount < 1: return 0
        return dp(amount)

单词拆分（139）
分析：将当前字符串差分为s[:j]和s[j:i+1]如果两个字符串在worddict中，则当前字符串在worddict中。
def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        dp = [True, s[0] in wordDict]
        print(dp)
        for i in range(1, len(s)):
            for j in range(i+1):
                if s[j: i+1] in wordDict and dp[j]:
                    dp.append(True)
                    break
            else:
                dp.append(False)
        return dp[-1]
