*剑指 Offer 65. 不用加减乘除做加法
分析：
直接把两个数对应位相加，不管进位。然后进位单独计算，如果某一位两个数都是 11 ，那么进位就会对下一位产生影响。然后接着算不进位求和加上进位的值，再计算新的进位，依次重复下去，直到进位为 00 为止。

class Solution:
    def add(self, a: int, b: int) -> int:
        a &= 0xffffffff
        b &= 0xffffffff
        while b != 0:
            carry = ((a & b) << 1) & 0xffffffff
            a ^= b
            b = carry
        return a if a < 0x80000000 else ~(a^0xffffffff)

*剑指 Offer 56 - I. 数组中数字出现的次数

   算法：先对所有数字进行一次异或，得到两个出现一次的数字的异或值。

        在异或结果中找到任意为 11 的位。

        根据这一位对所有的数字进行分组。

        在每个组内进行异或操作，得到两个数字。

class Solution:
    def singleNumbers(self, nums: List[int]) -> List[int]:
        ret = functools.reduce(lambda x, y: x ^ y, nums)
        div = 1
        while div & ret == 0:
            div <<= 1
        a, b = 0, 0
        for n in nums:
            if n & div:
                a ^= n
            else:
                b ^= n
        return [a, b]
   
